<?php


namespace UserTest\Controller;

use User\Model\User;
use Prophecy\Argument;
use User\Controller\UserController;
use Zend\Stdlib\ArrayUtils;
use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;
use User\Model\UserTable;
use Zend\ServiceManager\ServiceManager;

class UserControllerTest extends AbstractHttpControllerTestCase
{
    protected $traceError = true;
    protected $userTable;

    public function setUp()
    {
        // The module configuration should still be applicable for tests.
        // You can override configuration here with test case specific values,
        // such as sample view templates, path stacks, module_listener_options,
        // etc.
        $configOverrides = [];

        $this->setApplicationConfig(ArrayUtils::merge(
        // Grabbing the full application configuration:
            include __DIR__ . '/../../../../config/application.config.php',
            $configOverrides
        ));

        parent::setUp(); // TODO: Change the autogenerated stub

        $this->configureServiceManager($this->getApplicationServiceLocator());
    }

    public function testIndexActionCanBeAccessed(){
        // Here, we tell the mock object what the method "fetchAll" should return.
        // We can just tell the mock object to return an empty list or a list with a new user.
        // To do this is just to make sure the unit tests will not touch the database and can be still tested.
        // Since we wipe data of db, then the test case will not connect to database, and the fetchAll() function will fails.
        // Then we use a mock object of UserTable, and tell it what fetchAll() will return to make sure the website can be accessed.
        $user = new User();
        $this->userTable->fetchAll()->willReturn([$user]);

        $this->dispatch('/user');
        $this->assertResponseStatusCode(200);
        $this->assertModuleName('User');
        $this->assertControllerName(UserController::class);
        $this->assertControllerClass('UserController');
        $this->assertMatchedRouteName('user');
    }

    public function testAddActionRedirectsAfterValidPost(){
        $this->userTable
            ->saveUser(Argument::type(User::class))
            ->shouldBeCalled();
        $postData = [
            'uid' => 'test01',
            'psw' => '123456',
            'email' => 'a@gmail.com',
        ];

        $this->dispatch('/user/add', 'POST', $postData);
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/user');
    }

    // To reconfigure service manager to wipe data of db, and produce a mock object that is assigned to $this->userTable.
    public function configureServiceManager(ServiceManager $serviceManager){
        $serviceManager->setAllowOverride(true);
        $serviceManager->setService('config', $this->updateConfig($serviceManager->get('config')));
        $serviceManager->setService(UserTable::class, $this->mockUserTable()->reveal());

        $serviceManager->setAllowOverride(false);
    }

    public function updateConfig($config){
        $config['db'] = [];
        return $config;
    }

    protected function mockUserTable(){
        $this->userTable = $this->prophesize(UserTable::class);
        return $this->userTable;
    }
}